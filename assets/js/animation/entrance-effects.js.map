{"version":3,"file":"entrance-effects.js","mappings":";;;;;AAAa;;AAEb;AACA;AACA;AACA,MAAMA,sBAAsB,GAAGA,CAAA,KAAM;EACjCC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;EACtB;EACA,MAAMC,gBAAgB,GAAGC,QAAQ,CAACC,gBAAgB,CAAC,sBAAsB,CAAC;EAE1E,IAAI,CAACF,gBAAgB,CAACG,MAAM,EAAE;IAC1B;EACJ;;EAEA;EACA,MAAMC,QAAQ,GAAG,IAAIC,oBAAoB,CAAEC,OAAO,IAAK;IACnDA,OAAO,CAACC,OAAO,CAAEC,KAAK,IAAK;MACvB,IAAIA,KAAK,CAACC,cAAc,EAAE;QACtB,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAM;;QAE5B;QACA,MAAMC,aAAa,GAAGF,OAAO,CAACG,YAAY,CAAC,oBAAoB,CAAC;QAChE,MAAMC,KAAK,GAAGJ,OAAO,CAACG,YAAY,CAAC,0BAA0B,CAAC;QAC9D,MAAME,OAAO,GAAGC,QAAQ,CAACF,KAAK,CAAC;;QAE/B;QACAG,UAAU,CAAC,MAAM;UACbP,OAAO,CAACQ,SAAS,CAACC,GAAG,CAAC,iBAAiBP,aAAa,EAAE,CAAC;UACvD;QACJ,CAAC,EAAEG,OAAO,CAAC;;QAEX;QACAX,QAAQ,CAACgB,SAAS,CAACV,OAAO,CAAC;MAC/B;IACJ,CAAC,CAAC;EACN,CAAC,EAAE;IACC;IACAW,SAAS,EAAE,GAAG;IACd;IACAC,UAAU,EAAE;EAChB,CAAC,CAAC;;EAEF;EACAtB,gBAAgB,CAACO,OAAO,CAAEG,OAAO,IAAK;IAClCN,QAAQ,CAACmB,OAAO,CAACb,OAAO,CAAC;EAC7B,CAAC,CAAC;AACN,CAAC;;AAED;AACA,IAAIT,QAAQ,CAACuB,UAAU,KAAK,SAAS,EAAE;EACnCvB,QAAQ,CAACwB,gBAAgB,CAAC,kBAAkB,EAAE5B,sBAAsB,CAAC;AACzE,CAAC,MAAM;EACHA,sBAAsB,CAAC,CAAC;AAC5B;;AAEA;AACA,MAAM6B,sBAAsB,GAAG,IAAIC,WAAW,CAAC,mBAAmB,EAAE;EAChEC,MAAM,EAAE;IACJC,IAAI,EAAEA,CAAA,KAAM;MACRhC,sBAAsB,CAAC,CAAC;IAC5B;EACJ;AACJ,CAAC,CAAC;;AAEF;AACAiC,MAAM,CAACJ,sBAAsB,GAAGA,sBAAsB,C","sources":["webpack://athemes-blocks/./assets/js/src/animation/entrance-effects.js"],"sourcesContent":["'use strict';\n\n/**\n * Initialize entrance animations using Intersection Observer\n */\nconst initEntranceAnimations = () => {\n    console.log(123123123);\n    // Get all elements with animation delay attribute\n    const animatedElements = document.querySelectorAll('[data-atb-animation]');\n\n    if (!animatedElements.length) {\n        return;\n    }\n\n    // Create Intersection Observer\n    const observer = new IntersectionObserver((entries) => {\n        entries.forEach((entry) => {\n            if (entry.isIntersecting) {\n                const element = entry.target;\n                \n                // Get animation delay from data attribute\n                const animationName = element.getAttribute('data-atb-animation');\n                const delay = element.getAttribute('data-atb-animation-delay');\n                const delayMs = parseInt(delay);\n\n                // Add animated class after the specified delay\n                setTimeout(() => {\n                    element.classList.add(`atb-animation-${animationName}`);\n                    // element.classList.add('animated');\n                }, delayMs);\n\n                // Unobserve the element after animation starts\n                observer.unobserve(element);\n            }\n        });\n    }, {\n        // Start animation when element is 20% visible\n        threshold: 0.2,\n        // Add some margin to start animation slightly before element is fully in view\n        rootMargin: '0px 0px -50px 0px'\n    });\n\n    // Observe all animated elements\n    animatedElements.forEach((element) => {\n        observer.observe(element);\n    });\n};\n\n// Initialize animations when DOM is loaded\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initEntranceAnimations);\n} else {\n    initEntranceAnimations();\n}\n\n// Create a custom event for triggering animations on new elements.\nconst triggerAnimationsEvent = new CustomEvent('triggerAnimations', {\n    detail: {\n        init: () => {\n            initEntranceAnimations();\n        }\n    }\n});\n\n// usage: window.triggerAnimationsEvent.detail.init();\nwindow.triggerAnimationsEvent = triggerAnimationsEvent;\n\n"],"names":["initEntranceAnimations","console","log","animatedElements","document","querySelectorAll","length","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","element","target","animationName","getAttribute","delay","delayMs","parseInt","setTimeout","classList","add","unobserve","threshold","rootMargin","observe","readyState","addEventListener","triggerAnimationsEvent","CustomEvent","detail","init","window"],"sourceRoot":""}